Current todo:
	1. Clean out dud search boxes and buttons from UI.
	2. Delete unneeded files
	3. Start creating view models in folder.
	4. Put Model/s in folder.
	5. Redo commands like AngelSix
	6. Use viewmodel Base class with fody weaver.
	7. Think about whether need any attached properties (Use AngelSix method if so)
	8. Define a set of colours.
	9. Change to rich text boxes with model for flow document text.
	10. View model flow doc overlay for hot sessions and diff display etc.
	11. DONE - Make XML persistence class generic.
	12. Think about dependency injection.
	13. Review!


OH MY GOD - THE FRUSTRATION THIS CAUSED.  Almost implemented custom manual popup placement.
The other issue is that the 'Handedness' setting has become corrupted or changed. To change this, follow these steps.
Press the Windows logo key+R to bring up the Run dialog box. In the Open line, copy/paste the following line of text.

shell:::{80F3F1D5-FECA-45F3-BC32-752C152E456E}

Press OK.
This will start the Tablet PC Settings configuration dialog (Even if you do not have a Tablet PC).
Select the Other Tab.
In the Handedness section, place a check mark in the Left Handed option.
Click OK.
This should place the menus on the right side.
Let us know the results.
Thank You for using Windows 7


			Do need XMLreader? - currently using TextReader/Writer

			Next need to try binding buttons with a TextAdd Command.
			Need more understanding of CommandParameter and [CallerMemberName]
			It's between this or just continuing with the button.tag passing info to the method.

			Now need to add spectype or speciality tags to Diagnosis objects.
			Then filter view of buttons by those tags (hardcode a tag to begin with )

			Then need to separate object of single diagnosis with whole text-edited report.
			Should be able to edit diagnosis text and offer save over or save as varient.
			Then add it to main report text.
			Textbox should switch views by binding to a view controler object which has current display text.

			Then need to develop search-as-type autocomplete combobox filtered by tag and perhaps ordered by usage frequency (later)
			
			Eventually convert text to flow document, with different coloured text to show changes/diffs and option of formatting/images etc.

			Develop command system for button and keyboard shortcut binding.  UIRoutedCommand seems to be the one.
			Need Save-over, save-as-varient, Save-as-new, AddReportText, Undo/Redo (could just track state of DiagnosisText and ReportText objects, and XML persistence objects)
			TextBox has good native undo/redo.  Need separate undo/redo system for save/clear diagnoses and add to dictionary.

			Additional user dictionary (compiled or not?) with add to dictionary and export function.

MenuItem item = new MenuItem();
item.Header = "Add to Dictionary";
item.Click += new RoutedEventHandler(AddDict_Click);
item.Command = EditingCommands.IgnoreSpellingError;
item.CommandParameter = currentText;
item.CommandTarget = txtBox;

Just need the logic to open the Dictionary file and write the element in CommandParameter to the file

	>>>>>>>>Need to experiment with Collectionviews next.  Try a sorted collectionview of DiagnosisCollection for ease with dropdown items.
			Then filter it for speciality tags.
			Speciality should have collection of spectypes.
			Speciality and spectypes should be searchable from box, but trigger items filter and button regenerate rather than report entry.
			Different colours for reports and spectypes etc.
			Different colours for reports matching spectypes, or speciality, or ben/mal, or custom.  not sure yet.

			Then some serious refactoring is needed.
			Extract mess of methods into sensible controler classes and only keep initialisation in mainwindow
			Rationalize commands
			Define Regions in XAML

			SaveEdited
			SaveAsNew
		>>>>SaveAsVariant - Produce data type for this.  It's a tree of some sort.

			Undo saves just with renaming overwritten to backup_timedate or whatever.
			Purge backups daily, keeping just one representative per day (end of day) from last 30 days, one per month before that.
			Backup XML to Firebase?

			Keep stack of spellcheck dictionary word add/removes for undo.
			Have right-click forget word in text editor.

			Extend Diagnosis class to include:
				spectype (list)
				speciality (these two may not be heirarchical, e.g. "gi polyp" or "punch biopsy")
				list of variant Diagnoses - ?than inherit from it?  Save as diff? Base frequency?
				bottomline
				codes
				notes
				metadatadictionary? (count of times used)
				category - diagnosis, snippet, dataset, other

			?Diff relative to most used variant?  Could promote that to parent, expand all text in familly and then recalculate diffs.
			Or just have as a sublist and find commonest each time and work out diffs on the fly.  What about editing "parent" text?  Propagate to varients?

			?Snippet category - e.g. negatives.  Immuno shows etc.  Fungal stain negative.
			?code snippets inline text editing?  Could track textbox text and when keyword recognized, allow double-tab expansion.
			Code snippet editor
			- At first, just include from SearchBox.

			Dataset reports - will likely need own custom windows.  Can shortcut quite a way with fine-grained search selection.
			Or start with templates in main or preview window.  Basic templating language (Google) with fields and data specifications.  Dependent fields.

			Preview window - for previewing report text and editing and saving - and for preview dataset answers.  Or just use main window (Swap out text or see in place)

			Datasets need to be extensions.  Find out how to do that.  New classes that implement a dataset interface I guess.  Or just templates.
			Each should start as barebones form with fields.
			Then add validation logic.
			Then do calculations.
			Then perhaps do UI or wizard input.
			Could just tab through form in best order.
			Needs a COSD XML output module.

			Then need a LIM input module.
			Possible command line trigger e.g. from Powerterm script.
			Picks up demog, specimen details including macro.

			Then need a report output module
			Have a OnReportCompleted event for stuff to subscribe to.
			Save to XML internally for backup (encrypt and to cloud)
			Output to pdf or text or whatever (with format config)
			Output to file for LIMS pickup or sendkeys to LIMS.

			Form scan module?

			Add safety features checking report.  Highlight certain words like:  grade, margin, positive, negative, numbers.  Missing "no".

			Need to handle small logic in non-dataset reports, e.g. for margin comments, immunoresults
			Maybe also use a preview window smart form.  Maybe as templates.

			Query my old report database.

				

